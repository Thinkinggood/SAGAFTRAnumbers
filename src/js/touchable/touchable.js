// Generated by CoffeeScript 1.6.1
(function() {
  var define, log, root;

  root = this;

  log = root.log;

  define = root.define;

  define(['jquery', 'touchable/touches'], function($, Touches) {
    var Touchable, bind, rest, slice,
      _this = this;
    slice = Array.prototype.slice;
    rest = function(array, index, guard) {
      return slice.call(array, (index != null) || guard ? 1 : index);
    };
    bind = function(func, obj) {
      var args;
      args = rest(arguments, 2);
      return function() {
        return func.apply(obj || root, args.concat(arguments));
      };
    };
    Touchable = (function() {

      function Touchable(element) {
        var _this = this;
        this.element = element;
        this.onTouchCancel = function(event) {
          return Touchable.prototype.onTouchCancel.apply(_this, arguments);
        };
        this.onTouchEnd = function(event) {
          return Touchable.prototype.onTouchEnd.apply(_this, arguments);
        };
        this.onTouchMove = function(event) {
          return Touchable.prototype.onTouchMove.apply(_this, arguments);
        };
        this.onTouchStart = function(event) {
          return Touchable.prototype.onTouchStart.apply(_this, arguments);
        };
        this.onMouseUp = function(event) {
          return Touchable.prototype.onMouseUp.apply(_this, arguments);
        };
        this.onMouseMove = function(event) {
          return Touchable.prototype.onMouseMove.apply(_this, arguments);
        };
        this.onMouseDown = function(event) {
          return Touchable.prototype.onMouseDown.apply(_this, arguments);
        };
        this.$ele = $(this.element);
        this.setTouchable(true);
        return;
      }

      Touchable.prototype.setTouchable = function(touchable) {
        if (this.touchable === touchable) {
          return;
        }
        this.touchable = touchable;
        this.$ele.css('pointer-events', this.touchable || this.hoverable ? 'auto' : 'none');
        if (this.touchable) {
          this.$ele.on({
            'mousedown': this.onMouseDown,
            'touchstart': this.onTouchStart
          });
        } else {
          this.$ele.off({
            'mousedown': this.onMouseDown,
            'touchstart': this.onTouchStart
          });
        }
      };

      Touchable.prototype.triggerTouchDown = function(touches) {
        return this.$ele.trigger('touchabledown', [touches]);
      };

      Touchable.prototype.triggerTouchMove = function(touches) {
        return this.$ele.trigger('touchablemove', [touches]);
      };

      Touchable.prototype.triggerTouchUp = function(touches) {
        return this.$ele.trigger('touchableup', [touches]);
      };

      Touchable.prototype.onMouseDown = function(event) {
        $(document).on({
          'mousemove': this.onMouseMove,
          'mouseup': this.onMouseUp
        });
        this.touches = new Touches(event);
        this.triggerTouchDown(this.touches);
      };

      Touchable.prototype.onMouseMove = function(event) {
        event.stopPropagation();
        event.preventDefault();
        this.touches._updateWithEvent(event);
        this.triggerTouchMove(this.touches);
      };

      Touchable.prototype.onMouseUp = function(event) {
        if (!this.touches) {
          return;
        }
        this.touches._goUpWithEvent(event);
        this.triggerTouchUp(this.touches);
        delete this.touches;
        $(document).off({
          'mousemove': this.onMouseMove,
          'mouseup': this.onMouseUp
        });
      };

      Touchable.prototype.onTouchStart = function(event) {
        event.stopPropagation();
        event.preventDefault();
        if ((this.touches != null) || event.length > 1) {
          this.onTouchCancel(event);
          return;
        }
        $(document).on({
          'touchmove': this.onTouchMove,
          'touchend': this.onTouchEnd,
          'touchcancel': this.onTouchCancel
        });
        this.touches = new Touches(event);
        this.triggerTouchDown(this.touches);
      };

      Touchable.prototype.onTouchMove = function(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.touches == null) {
          return;
        }
        this.touches._updateWithEvent(event);
        this.triggerTouchMove(this.touches);
      };

      Touchable.prototype.onTouchEnd = function(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.touches == null) {
          return;
        }
        this.touches._goUpWithEvent(event);
        this.triggerTouchUp(this.touches);
        delete this.touches;
        $(document).off({
          'touchmove': this.onTouchMove,
          'touchend': this.onTouchEnd,
          'touchcancel': this.onTouchCancel
        });
      };

      Touchable.prototype.onTouchCancel = function(event) {
        this.onTouchEnd(event);
      };

      return Touchable;

    })();
    return Touchable;
  });

}).call(this);
