// Generated by CoffeeScript 1.3.3
(function() {
  var isNumberDragging;

  isNumberDragging = false;

  Tangle.classes.AFTRANumber = {
    initialize: function(element, options, tangle, variable) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      this.element = element;
      this.tangle = tangle;
      this.variable = variable;
      this.$ele = $(this.element);
      this.min = (_ref = (_ref1 = this.$ele.attr('min')) != null ? _ref1 : options.min) != null ? _ref : 0;
      this.max = (_ref2 = (_ref3 = this.$ele.attr('max')) != null ? _ref3 : options.max) != null ? _ref2 : 1e100;
      this.step = (_ref4 = (_ref5 = this.$ele.attr('step')) != null ? _ref5 : options.step) != null ? _ref4 : 1;
      if (!this._bound) {
        this._bound = {
          touchDown: bind(this._touchDown, this),
          touchMove: bind(this._touchMove, this),
          touchUp: bind(this._touchUp, this)
        };
      }
      this.isInput = this.$ele.is('input');
      this.initializeHover();
      this.initializeHelp();
      this.initializeDrag();
      if (this.isInput) {
        this.update = this.updateValue;
        this.$ele.on('change input', function(event) {
          var value;
          value = _this.getValue();
          if (!isNaN(value)) {
            _this.tangle.setValue(_this.variable, value);
          }
        });
      }
    },
    getValue: function() {
      return parseInt(this.$ele.val() || 0, 10);
    },
    updateValue: function(element, value) {
      var currentValue;
      currentValue = this.getValue();
      if (value !== currentValue) {
        this.$ele.val(value);
      }
    },
    initializeHover: function() {
      var _this = this;
      this.isHovering = false;
      $(this.element).on("mouseenter", function(event) {
        _this.isHovering = true;
        _this.updateRollOver();
      });
      $(this.element).on("mouseleave", function(event) {
        _this.isHovering = false;
        _this.updateRollOver();
      });
    },
    updateRollOver: function() {
      this.updateStyle();
      this.updateCursor();
      this.updateHelp();
    },
    isActive: function() {
      return this.isDragging || (this.isHovering && !isNumberDragging);
    },
    updateStyle: function() {
      if (this.isDragging) {
        this.$ele.addClass("TKAdjustableNumberDown");
      } else {
        this.$ele.removeClass("TKAdjustableNumberDown");
      }
      if (!this.isDragging && this.isActive()) {
        this.$ele.addClass("TKAdjustableNumberHover");
      } else {
        this.$ele.removeClass("TKAdjustableNumberHover");
      }
    },
    updateCursor: function() {
      var $body;
      $body = $("body");
      if (this.isActive()) {
        $body.addClass("TKCursorDragHorizontal");
      } else {
        $body.removeClass("TKCursorDragHorizontal");
      }
    },
    initializeHelp: function() {
      this.$help = $("<div class='TKAdjustableNumberHelp'>" + (this.isInput ? 'click or ' : '') + "drag</div>");
      if (this.isInput) {
        this.$ele.wrap('<span style="display: inline-block; position: relative;" />');
        this.$help.insertAfter(this.$ele).hide();
      } else {
        this.$help.prependTo(this.$ele).hide();
      }
    },
    updateHelp: function() {
      var bt, d, l, pt, t;
      l = Math.round((this.$ele.outerWidth() - this.$help.width()) / 2);
      pt = this.$ele.css('paddingTop');
      bt = this.$ele.css('borderTopWidth');
      t = -this.$help.height() - (parseInt(pt) + parseInt(bt)) * 2;
      d = this.isHovering && !isNumberDragging ? 'block' : 'none';
      this.$help.css({
        left: l,
        top: t,
        display: d
      });
    },
    initializeDrag: function() {
      this.isDragging = false;
      this.touchable = new Touchable(this.element);
      this.$ele.on({
        'touchDown': this._bound.touchDown,
        'touchMove': this._bound.touchMove,
        'touchUp': this._bound.touchUp
      });
    },
    _touchDown: function(event, touches) {
      this.valStart = this.tangle.getValue(this.variable);
      this.isDragging = true;
      isNumberDragging = true;
      this.updateRollOver();
    },
    _touchMove: function(event, touches) {
      var value;
      value = this.valStart + touches.translation.x / 5 * this.step;
      value = Math.min(Math.max(this.min, Math.round(value / this.step) * this.step), this.max);
      this.tangle.setValue(this.variable, value);
      this.updateHelp();
    },
    _touchUp: function(event, touches) {
      var _ref;
      this.isDragging = false;
      isNumberDragging = false;
      this.updateRollOver();
      this.$help.css('display', touches.wasTap ? 'block' : 'none');
      if (((_ref = touches.delta) != null ? _ref.x : void 0) === 0 && this.valStart === this.getValue()) {
        this.$ele.select();
      }
    }
  };

}).call(this);
