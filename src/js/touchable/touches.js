// Generated by CoffeeScript 1.4.0
(function() {
  // var define, log, root;

  // root = this;

  // log = root.log;

  // define = root.define;

  define([], function() {
    var Touches;
    Touches = (function() {

      function Touches(event) {
        this.event = event;
        this.globalPoint = {
          x: parseInt(event.pageX || event.originalEvent.touches[0].pageX, 10),
          y: parseInt(event.pageY || event.originalEvent.touches[0].pageY, 10)
        };
        this.translation = {
          x: 0,
          y: 0
        };
        this.delta = {
          x: 0,
          y: 0
        };
        this.vel = {
          x: 0,
          y: 0
        };
        this.count = 1;
        this.timestamp = event.timestamp;
        this.downTimestamp = this.timestamp;
        return;
      }

      Touches.prototype._updateWithEvent = function(event, remove) {
        var dt, dx, dy, px, py, samePoint, stopped, timestamp;
        this.event = event;
        if (!remove) {
          px = parseInt(event.pageX || event.originalEvent.touches[0].pageX, 10);
          py = parseInt(event.pageY || event.originalEvent.touches[0].pageY, 10);
          dx = px - this.globalPoint.x;
          dy = -py - this.globalPoint.y;
          this.translation.x += dx;
          this.translation.y += dy;
          this.delta.x += dx;
          this.delta.y += dy;
          this.globalPoint.x = px;
          this.globalPoint.y = py;
        }
        timestamp = event.timestamp;
        dt = timestamp - this.timestamp;
        samePoint = remove || (dx === 0 && dy === 0);
        stopped = samePoint && dt > 150;
        this.vel.x = stopped ? 0 : samePoint || dt === 0 ? this.vel.x : dx / dt * 1000;
        this.vel.y = stopped ? 0 : samePoint || dt === 0 ? this.vel.y : dy / dt * 1000;
        this.timestamp = timestamp;
      };

      Touches.prototype._goUpWithEvent = function(event) {
        var didMove, wasMoving;
        this._updateWithEvent(event, true);
        this.count = 0;
        didMove = Math.abs(this.translation.x) > 10 || Math.abs(this.translation.y) > 10;
        wasMoving = Math.abs(this.vel.x) > 400 || Math.abs(this.vel.y) > 400;
        this.wasTap = !didMove && !wasMoving && (this.getTimeSinceGoingDown() < 300);
      };

      Touches.prototype.getTimeSinceGoingDown = function() {
        return this.timestamp - this.downTimestamp;
      };

      Touches.prototype.resetDeltaTranslation = function() {
        this.delta.x = 0;
        this.delta.y = 0;
      };

      return Touches;

    })();
    return Touches;
  });

}).call(this);
