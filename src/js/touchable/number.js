// Generated by CoffeeScript 1.3.3
(function() {
  var define, log, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  log = root.log;

  define = root.define;

  define(['jquery', 'touchable'], function($, Touchable) {
    var DraggableNumber;
    root.isNumberDragging = false;
    DraggableNumber = (function() {

      function DraggableNumber(element, options) {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        this.element = element;
        this.onTouchUp = __bind(this.onTouchUp, this);

        this.onTouchMove = __bind(this.onTouchMove, this);

        this.onTouchDown = __bind(this.onTouchDown, this);

        this.onMouseLeave = __bind(this.onMouseLeave, this);

        this.onMouseEnter = __bind(this.onMouseEnter, this);

        this.$ele = $(this.element);
        this.min = (_ref = (_ref1 = this.$ele.attr('min')) != null ? _ref1 : options.min) != null ? _ref : 0;
        this.max = (_ref2 = (_ref3 = this.$ele.attr('max')) != null ? _ref3 : options.max) != null ? _ref2 : 1e100;
        this.step = (_ref4 = (_ref5 = this.$ele.attr('step')) != null ? _ref5 : options.step) != null ? _ref4 : 1;
        this.initializeHover();
        this.initializeHelp();
        this.initializeDrag();
        return;
      }

      DraggableNumber.prototype.initializeHover = function() {
        this.isHovering = false;
        this.$ele.on({
          'mouseenter': onMouseEnter,
          'mouseleave': onMouseLeave
        });
      };

      DraggableNumber.prototype.initializeHelp = function() {
        var isInput;
        isInput = this.$ele.is('input');
        this.$help = $("<div class='number-help'>" + (isInput ? 'click or ' : '') + "drag</div>");
        if (isInput) {
          this.$ele.wrap('<span style="display: inline-block; position: relative;" />');
          this.$help.insertAfter(this.$ele).hide();
        } else {
          this.$help.prependTo(this.$ele).hide();
        }
      };

      DraggableNumber.prototype.initializeDrag = function() {
        this.isDragging = false;
        this.touchable = new Touchable(this.element);
        this.$ele.on({
          'touchdown': this.onTouchDown,
          'touchmove': this.onTouchMove,
          'touchup': this.onTouchUp
        });
      };

      DraggableNumber.prototype.onMouseEnter = function(event) {
        this.isHovering = true;
        this.updateRollover();
      };

      DraggableNumber.prototype.onMouseLeave = function(event) {
        this.isHovering = false;
        this.updateRollOver();
      };

      DraggableNumber.prototype.onTouchDown = function(event, touches) {
        this.valStart = this.$ele.val();
        this.isDragging = root.isNumberDragging = true;
        this.updateRollover();
      };

      DraggableNumber.prototype.onTouchMove = function(event, touches) {
        var value;
        value = this.valStart + touches.translation.x / 5 * this.step;
        value = Math.min(Math.max(this.min, Math.round(value / this.step) * this.step), this.max);
        this.$ele.val(value);
        this.updateHelp();
      };

      DraggableNumber.prototype.onTouchUp = function(event, touches) {
        var _ref;
        this.isDragging = root.isNumberDragging = false;
        this.updateRollover();
        this.$help.css('display', touches.wasTap ? 'block' : 'none');
        if (((_ref = touches.delta) != null ? _ref.x : void 0) === 0 && this.valStart === this.$ele.val()) {
          this.$ele.select();
        }
      };

      DraggableNumber.prototype.updateRollOver = function() {
        this.updateStyle();
        this.updateCursor();
        this.updateHelp();
      };

      DraggableNumber.prototype.isActive = function() {
        return !this.isDragging && !root.isNumberDragging && this.isHovering;
      };

      DraggableNumber.prototype.updateStyle = function() {
        this.$ele.toggleClass('number-down', this.isDragging);
        this.$ele.toggleClass('number-hover', this.isActive());
      };

      DraggableNumber.prototype.updateCursor = function() {
        $('body').toggleClass('number-cursor-drag-h', this.isActive());
      };

      DraggableNumber.prototype.updateHelp = function() {
        var bt, d, l, pt, t;
        l = Math.round((this.$ele.outerWidth() - this.$help.width()) / 2);
        pt = this.$ele.css('paddingTop');
        bt = this.$ele.css('borderTopWidth');
        t = -this.$help.height() - (parseInt(pt) + parseInt(bt)) * 2;
        d = this.isHovering && !root.isNumberDragging ? 'block' : 'none';
        this.$help.css({
          display: d,
          left: l,
          top: t
        });
      };

      return DraggableNumber;

    })();
    return DraggableNumber;
  });

}).call(this);
