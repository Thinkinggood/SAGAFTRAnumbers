// Generated by CoffeeScript 1.4.0
(function() {
  var define, log, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  log = root.log;

  define = root.define;

  define(['jquery', 'underscore', 'input/radio/*', 'input/television/*', 'input/psa/*', 'input/corp-edu/*', 'chosen'], function($, _, Radio, TV, PSA, CorpEdu) {
    var JobType;
    JobType = (function() {

      function JobType() {
        this.onChange = __bind(this.onChange, this);
        this.html = "<fieldset>\n	I'm hiring for a\n	<select name=\"job-type\" id=\"job-type\" class=\"chzn-select\" data-placeholder=\"please choose your job\">\n		<option value=\"-1\" data-value=\"none\"></option>\n	</select>.\n</fieldset>";
        this.$el = $(this.html);
        this.el = this.$el[0];
        this.setupOptions();
        this.$el.on('change', '#job-type', this.onChange);
      }

      JobType.prototype.setupOptions = function() {
        var html;
        this.selectedIndex = -1;
        this.selectedItem = null;
        this.options = [new Radio.Commercial(), new Radio.Demo(), new TV.OnCamera(), new TV.OffCamera(), new TV.Demo(), new PSA.Radio(), new PSA.OnCamera(), new PSA.OffCamera(), new CorpEdu.OnCamera(), new CorpEdu.OffCamera(), new CorpEdu.AudioOnly()];
        html = '';
        _.each(this.options, function(el, i) {
          return html += "<option value=\"" + i + "\" data-value=\"" + el.value + "\">" + el.label + "</option>";
        });
        return this.$el.find('select').append(html);
      };

      JobType.prototype.onChange = function(event) {
        this.selectedIndex = parseInt(event.target.value, 10);
        this.selectedItem = this.selectedIndex !== -1 ? this.options[this.selectedIndex] : null;
        if (this.selectedItem != null) {
          this.$el.siblings().detach();
          this.$el.afterPolyfill(this.selectedItem.$el);
          return this.selectedItem.$el.find('#num-days').trigger('input');
        } else {
          this.$el.siblings().find('input').filter('[type=number]').each(function(i, el) {
            return $(el).val($(el).attr('min') || 0).trigger('change');
          });
          this.$el.siblings().find('select').not('#job-type').val(-1).trigger('liszt:updated').trigger('change').filter('[multiple]').val([]).trigger('liszt:updated').trigger('change');
          return this.$el.siblings().detach();
        }
      };

      return JobType;

    })();
    return JobType;
  });

}).call(this);
