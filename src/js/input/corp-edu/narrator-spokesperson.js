// Generated by CoffeeScript 1.3.3
(function() {
  var define, log, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  log = root.log;

  define = root.define;

  define(['jquery', 'underscore', 'input/corp-edu/narrator-day'], function($, _, NarratorDay) {
    var NarratorSpokesperson;
    NarratorSpokesperson = (function() {

      function NarratorSpokesperson() {
        this.onInputExtras = __bind(this.onInputExtras, this);

        this.onInputPlayers = __bind(this.onInputPlayers, this);

        this.onInputNarrators = __bind(this.onInputNarrators, this);
        this.html = "<fieldset>\n          I'll need\n          <input type=\"number\" name=\"num-narrators\" id=\"num-narrators\" value=\"0\" min=\"0\" max=\"10\">\n          <a href=\"#narrator-spokesperson\" class=\"term open\">narrator/spokesperson</a>(s),\n\n          <input type=\"number\" name=\"num-players\" id=\"num-players\" value=\"0\" min=\"0\" max=\"10\">\n          <a href=\"#day-player\" class=\"term open\">day player</a>(s), and\n          \n          <input type=\"number\" name=\"num-extras\" id=\"num-extras\" value=\"0\" min=\"0\" max=\"10\">\n          <a href=\"#general-extra\" class=\"term open\">extra</a>(s).\n</fieldset>";
        this.$el = $(this.html);
        this.el = this.$el[0];
        this.narrators = [];
        this.$el.on('input change', '#num-narrators', this.onInputNarrators);
        this.players = [];
        this.$el.on('input change', '#num-players', this.onInputPlayers);
        this.extras = [];
        this.$el.on('input change', '#num-extras', this.onInputExtras);
      }

      NarratorSpokesperson.prototype.onInputNarrators = function(event) {
        var narrator, numNarrators;
        numNarrators = parseInt(event.target.value, 10);
        if (numNarrators === this.narrators.length) {
          return;
        }
        if (numNarrators > this.narrators.length) {
          while (this.narrators.length < numNarrators) {
            narrator = new NarratorDay(this.narrators.length + 1);
            this.narrators.push(narrator);
            this.$el.append(narrator.$el);
          }
        } else {
          while (this.narrators.length > numNarrators) {
            this.narrators.pop().$el.remove();
          }
        }
        if (event.type === 'input') {
          return this.$el.trigger('change');
        }
      };

      NarratorSpokesperson.prototype.onInputPlayers = function(event) {
        var numPlayers, player;
        numPlayers = parseInt(event.target.value, 10);
        if (numPlayers === this.players.length) {
          return;
        }
        if (numPlayers > this.players.length) {
          while (this.players.length < numPlayers) {
            player = new PlayerDay(this.players.length + 1);
            this.players.push(player);
            this.$el.append(player.$el);
          }
        } else {
          while (this.players.length > numPlayers) {
            this.players.pop().$el.remove();
          }
        }
        if (event.type === 'input') {
          return this.$el.trigger('change');
        }
      };

      NarratorSpokesperson.prototype.onInputExtras = function(event) {
        var extra, numExtras;
        numExtras = parseInt(event.target.value, 10);
        if (numExtras === this.extras.length) {
          return;
        }
        if (numExtras > this.extras.length) {
          while (this.extras.length < numExtras) {
            extra = new ExtraDay(this.extras.length + 1);
            this.extras.push(extra);
            this.$el.append(extra.$el);
          }
        } else {
          while (this.extras.length > numExtras) {
            this.extras.pop().$el.remove();
          }
        }
        if (event.type === 'input') {
          return this.$el.trigger('change');
        }
      };

      return NarratorSpokesperson;

    })();
    return NarratorSpokesperson;
  });

}).call(this);
