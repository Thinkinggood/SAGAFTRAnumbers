// Generated by CoffeeScript 1.4.0
(function() {
  var define, log, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  log = root.log;

  define = root.define;

  define(['jquery', 'underscore', 'input/corp-edu/principal-actor-hour'], function($, _, PrincipalActorHour) {
    var PrincipalActorAudioOnly;
    PrincipalActorAudioOnly = (function() {

      function PrincipalActorAudioOnly() {
        this.onInputPrincipals = __bind(this.onInputPrincipals, this);
        this.html = "<fieldset>\n	I'll need:\n	<div>\n		<input type=\"number\" name=\"num-principals\" id=\"num-principals\" value=\"0\" min=\"0\" max=\"10\">\n		<a href=\"#principal-actor-audio-only\" class=\"term open\">Audio Only - principal actor</a>(s),\n	</div>\n</fieldset>";
        this.$el = $(this.html);
        this.el = this.$el[0];
        this.principals = [];
        this.$el.on('input change', '#num-principals', this.onInputPrincipals);
      }

      PrincipalActorAudioOnly.prototype.onInputPrincipals = function(event) {
        var numPrincipals, principal;
        numPrincipals = parseInt(event.target.value, 10);
        if (numPrincipals === this.principals.length) {
          return;
        }
        if (this.principals.length < numPrincipals) {
          while (this.principals.length < numPrincipals) {
            principal = new PrincipalActorHour(this.principals.length + 1);
            this.principals.push(principal);
            $(event.target).closest('div').appendPolyfill(principal.$el);
          }
        } else {
          while (this.principals.length > numPrincipals) {
            this.principals.pop().$el.remove();
          }
        }
        if (event.type === 'input') {
          return this.$el.trigger('change');
        }
      };

      return PrincipalActorAudioOnly;

    })();
    return PrincipalActorAudioOnly;
  });

}).call(this);
