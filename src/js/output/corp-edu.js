// Generated by CoffeeScript 1.3.3
(function() {
  var define, log, root;

  root = this;

  log = root.log;

  define = root.define;

  define(['jquery'], function($) {
    var CorpEdu;
    CorpEdu = (function() {

      function CorpEdu() {}

      CorpEdu.onCameraSessionLineItems = function(rates) {
        var category, categoryLabel, categoryPrefix, extraLabel, extraSuffix, extraTypeIndex, i, lineItem, lineItems, numDays, numExtras, numFiveDays, numFullDays, numHalfDays, numHalfPlayers, numNarrators, numPlayers, numSingleDays, numThreeDays;
        category = parseInt($('input:radio[name=category]:checked').val(), 10);
        categoryLabel = category === 0 ? 'Category I' : 'Category II';
        categoryPrefix = category === 0 ? 'cat_1_' : 'cat_2_';
        numNarrators = parseInt($('#num-narrators').val(), 10);
        numHalfPlayers = parseInt($('#num-half-players').val(), 10);
        numPlayers = parseInt($('#num-players').val(), 10);
        numExtras = parseInt($('#num-extras').val(), 10);
        numDays = 0;
        lineItems = [];
        i = 0;
        while (i++ < numNarrators) {
          numDays = parseInt($("#narrator-" + i + "-num-days").val(), 10);
          lineItem = {
            label: "" + categoryLabel + " Narrator " + i + " - " + numDays + " Days Total",
            first: {
              label: "First Day",
              price: rates[categoryPrefix + 'session_narrator_day_1']
            },
            items: []
          };
          if (numDays - 1) {
            lineItem.items.push({
              count: numDays - 1,
              label: "Add'l Days at $ " + (rates[categoryPrefix + 'session_narrator_day_2'].toFixed(2)),
              price: rates[categoryPrefix + 'session_narrator_day_2']
            });
          }
          lineItems.push(lineItem);
        }
        i = 0;
        while (i++ < numHalfPlayers) {
          lineItem = {
            label: "" + categoryLabel + " Half-day Player " + i,
            first: {
              label: "4-hour Session at $ " + (rates[categoryPrefix + 'session_player_half_day'].toFixed(2)),
              price: rates[categoryPrefix + 'session_player_half_day']
            },
            items: []
          };
          lineItems.push(lineItem);
        }
        i = 0;
        while (i++ < numPlayers) {
          numDays = parseFloat($("#player-" + i + "-num-days").val(), 10);
          numFullDays = Math.floor(numDays);
          numHalfDays = Math.ceil(numDays - numFullDays);
          numFiveDays = Math.floor(numFullDays / 5);
          numThreeDays = Math.floor((numFullDays - (numFiveDays * 5)) / 3);
          numSingleDays = numFullDays - ((numFiveDays * 5) + (numThreeDays * 3));
          lineItem = {
            label: "" + categoryLabel + " Day Player " + i + " - " + numDays + " Days Total",
            items: []
          };
          if (numFiveDays) {
            lineItem.items.push({
              count: numFiveDays,
              label: "Week Session(s) at $ " + (rates[categoryPrefix + 'session_player_week'].toFixed(2)),
              price: rates[categoryPrefix + 'session_player_week']
            });
          }
          if (numThreeDays) {
            lineItem.items.push({
              count: numThreeDays,
              label: "3-Day Session(s) at $ " + (rates[categoryPrefix + 'session_player_day_3'].toFixed(2)),
              price: rates[categoryPrefix + 'session_player_day_3']
            });
          }
          if (numSingleDays) {
            lineItem.items.push({
              count: numSingleDays,
              label: "Single Day Session(s) at $ " + (rates[categoryPrefix + 'session_player_day_1'].toFixed(2)),
              price: rates[categoryPrefix + 'session_player_day_1']
            });
          }
          lineItems.push(lineItem);
        }
        i = 0;
        while (i++ < numExtras) {
          numDays = parseInt($("#extra-" + i + "-num-days").val(), 10);
          extraTypeIndex = parseInt($("#extra-" + i + "-type").val(), 10) || 0;
          extraLabel = ['General Extra', 'Special Ability Extra', 'Silent Bit Extra'][extraTypeIndex];
          extraSuffix = ['_general', '_special', '_silent'][extraTypeIndex];
          lineItem = {
            label: "" + categoryLabel + " Extra " + i + " - " + numDays + " Days Total",
            first: {
              label: "" + extraLabel + " at $ " + (rates[categoryPrefix + 'session_extra' + extraSuffix].toFixed(2)),
              price: rates[categoryPrefix + 'session_extra' + extraSuffix] * numDays
            },
            items: []
          };
          lineItems.push(lineItem);
        }
        return lineItems;
      };

      CorpEdu.offCameraSessionLineItems = function(rates) {
        var category, categoryLabel, categoryPrefix, i, lineItem, lineItems, numHours, numPrincipals;
        category = parseInt($('input:radio[name=category]:checked').val(), 10);
        categoryLabel = category === 0 ? 'Category I' : 'Category II';
        categoryPrefix = category === 0 ? 'cat_1_' : 'cat_2_';
        numPrincipals = parseInt($('#num-principals').val(), 10);
        lineItems = [];
        i = 0;
        while (i++ < numPrincipals) {
          numHours = parseFloat($("#principal-" + i + "-num-hours").val(), 10);
          lineItem = {
            label: "" + categoryLabel + " Principal " + i + " - " + numHours + " Hours Total",
            first: {
              label: "First Hour",
              price: rates[categoryPrefix + 'session_actor_first_hour']
            },
            items: []
          };
          if (numHours - 1) {
            lineItem.items.push({
              count: (numHours - 1) * 2,
              label: "Add'l Half Hours at $ " + (rates[categoryPrefix + 'session_actor_addl_half'].toFixed(2)),
              price: rates[categoryPrefix + 'session_actor_addl_half']
            });
          }
          lineItems.push(lineItem);
        }
        return lineItems;
      };

      CorpEdu.audioOnlySessionLineItems = function(rates) {
        var lineItem, lineItems;
        lineItems = [];
        lineItem = {
          label: "",
          first: {
            label: "",
            price: 0
          },
          items: []
        };
        lineItem.items.push({
          count: 0,
          label: "",
          price: 0
        });
        lineItems.push(lineItem);
        return lineItems;
      };

      return CorpEdu;

    })();
    return CorpEdu;
  });

}).call(this);
